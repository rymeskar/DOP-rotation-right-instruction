;prvne rozvist na co nejdelsi, odeslat na git
init2:		OES OEAB,		0,	0,		; adresace pameti
READ_L2:	{
		OES OEAB MRD ECINL,	0,	10,	READ_L2	; nacteme nizsi slabiku
		ECS,			0,	0,		; zvysime ukazatel na pamet
		}
		OES OEAB,		0,	0,		; adresace pameti
READ_H2:	{
		OES OEAB MRD ECINH,	0,	10,	READ_H2	; nacetem vyssi slabiku
		OEINLH PEU ECS,			0,	0,		; zapis do registru U - nizsi a zvysime ukazatel na pamet
		}
		
;**********************************************************************************
init3:		OES OEAB,		0,	0,		; adresace pameti
READ_L3:	{
		OES OEAB MRD ECINL,	0,	10,	READ_L3	; nacteme nizsi slabiku
		ECS,			0,	0,		; zvysime ukazatel na pamet
		}
		OES OEAB,		0,	0,		; adresace pameti
READ_H3:	{
		OES OEAB MRD ECINH,	0,	10,	READ_H3	; nacetem vyssi slabiku
		OEINLH PET,		0,	0,		; zapis do registru U - nizsi
		}
		
		ECS, 	0, 	0,  ; CHECK_ZERO_L	zvysime ukazatel na pamet a rovnou testujem zero flag
;**********************************************************************************
		
;------------------------------vymaskování L s 00011111
		
		OEL ECW ECF ,  2, 0 ,				; L -> W , amortizovani flagů kvůli carry!!
		ECW     	, 15, 0, 				; shift left
		ECW     	, 15, 0, 				; shift left
		ECW     	, 15, 0, 				; shift left
		ECW			, 1 , 0, 				; shift right
		ECW			, 1 , 0, 				; shift right
		ECW			, 1 , 0, 				; shift right
		OEW PEL 	,  0, 0, 				; W -> L
					,  0, 14,  CHECK_ZERO_L ; checks if L is zero
		
;-------------------------------kontrola L!=0
CHECK_ZERO_L: {
		OEU ECW			,   2, 	 0, pre_shift     ; nacteni U -> W, pokud neni nula 
		OEU ECW ECF UCF ,  	2,   0, 	check_higher;   pokud je nula, ihned zapis zpet do pameti  U -> W a setni flagy na nizsi slovo
		}
pre_shift:  CFS1 ECF,	7,  0,		; setne nejnizsi bit vyssiho slova jako carry flag
one_shift:  OEW  PEU,   0,  0,  	;  vrati U nazpet
;**********************************************************************************
lo_right:	 OET ECW,	2,	0,		; nacte T -> W
		ECF ECW CFS1,		1,	0,	; posuv o 1 vpravo za pomoci carry z predesle ALU operace a opet setne nejnizsi bit
		OEW PET     ,		0,	0,	; zapis w -> T
;**********************************************************************************
hi_right: OEU ECW	,		2,	0,		; nacte U -> W
		ECF ECW     ,		1,	0,		; posuv o 1 vpravo za pomoci carry z predesle ALU operace
;**********************************************************************************
		ECL        ,		0,	0,		; L--
		,			0,	14,		; loop
loop:		{
		CFS1 ECF,	7,	0,	one_shift	; L neni nulove, rovnou setnu nejnizsi bit vyssiho slova jako carry flag 
		OEW PEU UCF,			0,	0,	check_higher	; L je nula, zapisu w -> U A pripravim cumulative zero mode
		}
;**********************************************************************************
			  
check_higher: OET ECW  ECF, 		2,  0,  	; T -> W a rovnou setnout flagy 

write:		OEU ECOUTWR,		0,	0,		; U->DOUT

		OED OEAB,		0,	0,		; adresace pameti
wr_lo:		{
		OED OEAB MWR OEWR, 	0,	10,	wr_lo	; zapis dat do pameti lo
		OED OEAB OEWR ECD,	0,	0,		; presah
		}

		OED OEAB, 		0,	0,		; adresace pameti
wr_hi:		{
		OED OEAB MWR OEWR LH,	0,	10, 	wr_hi	; zapis dat do pameti hi
		OED OEAB ECD OEWR LH,   0,	0, 		;
		}
;**********************************************************************************
write2:		OET ECOUTWR,		0,	0,		; T->DOUT

		OED OEAB,		0,	0,		; adresace pameti
wr_lo2:		{
		OED OEAB MWR OEWR, 	0,	10,	wr_lo2	; zapis dat do pameti lo
		OED OEAB OEWR ECD,		0,	0,		; presah
		}

		OED OEAB, 		0,	0,		; adresace pameti
wr_hi2:		{
		OED OEAB MWR OEWR LH,	0,	10, 	wr_hi2	; zapis dat do pameti hi
		OED OEAB OEWR LH ECD,   0,	0, 		;
		}
		
;**********************************************************************************
end:		,			0,	0,	init1	; again